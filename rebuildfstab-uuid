#!/bin/sh
#
# (Copyright  (C) 2007 sidux Foundation,Inc.
#             (C) 2007 Joaquim Boura <x-un-i@sidux.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# On Debian GNU/Linux systems, the text of the GPL license can be
# found in /usr/share/common-licenses/GPL.
#
#--------------------------------------------------------------

[ "$(id -u)" -ne 0 ] && exec su-me "$0" "$@"

#--------------------------------------------------------------

all_uuids=""
dev_done=""
dump="0"
pass="1"

#--------------------------------------------------------------
# the defaults

create_mount_points="no"
write_fstab="no"

FSTAB="/etc/fstab"

#--------------------------------------------------------------

usage()
{
	echo "$(basename $0)can (re)create the /etc/fsatb file"
	echo "and can create missing mountpoints in /media"
	echo "default is to print to stdout, and not (re)create mountpoints"	
	echo ""
	echo "-h|--help print this help"
	echo "-w|--write-fstab (re)create the fstab file"
	echo "-m|--make-mountpoints  (re)create mountpoints in /media"
}
#--------------------------------------------------------------

bad_arg_value()
{
	usage
	exit 1
}

#--------------------------------------------------------------

out()
{
	if [ "$write_fstab" = "yes" ]; then
		printf "${@}" >> ${FSTAB}
	else
		printf "$@"
	fi
}

#--------------------------------------------------------------

create_media_entry()
{
	mypoint=$1
	if [ "$create_mount_points" = "yes" ] ; then
		[ -d "$mypoint" ] || mkdir -p "$mypoint" 2>/dev/null
	fi
}

#------------------------------------------------------------
#output $uuid $point $fstype $options $dump $pass

output()
{
	if [ "$to_file" = "true" ]; then
		out "%s\t%s\t%s\t%s\t%s %s\n" $1 $2 $3 $4 $5 $6 >> ${TO_FILE}
	else
		out "%s\t%s\t%s\t%s\t%s %s\n" $1 $2 $3 $4 $5 $6
	fi
}

#--------------------------------------------------------------

start()
{
	out "%s\n" "# /etc/fstab: static file system information" 
	out "%s\n" "#"
	out "%s\t\t\t\t\t%s\t%s\t%s\t%s\n\n" "# <file system>" "<mount point>" "<type>" "<options>" "<dump> <pass>"
}

#--------------------------------------------------------------
# print_outcdrom $name $point $CDR $CDRW $DVD $DVD_R $DVD_RAM

print_outcdrom()
{
	fstype="udf,iso9660"
	options="user,noauto"
 	output $1 $2 $fstype $options 0 0
}

#--------------------------------------------------------------
# return 0 if the device is a removable one
# firewire and usb are removable ones...

is_device_removable()
{
	curdev=$(echo $1 |cut -d / -f 3 |sed 's%\(...\).*$%\1%')
	ls -l /sys/block/$curdev/device | grep -q -e usb -e fw 
	# return 0 is the device is removable ...
	ret=$?
	return $ret
}
#--------------------------------------------------------------

devs_not_in_media()
{
	# Mounted Partitions not in /media
	# formated as device:mountpoint
	mntpnt=$(mount |grep -v -e devpts -e tmpfs -e proc -e sysfs \
		-e udev -e media -e none -e fuse |awk '{print $1":"$3}')

	for i in ${mntpnt}; do
		dev=$(echo $i |cut -d ":" -f1)
		uuid=$(/lib/udev/vol_id -u $dev)
		[ -z "$uuid" ] && uuid=$dev || uuid="UUID=$uuid"

		if test -z "$all_uuids" ; then
			# the first one
			all_uuids="$uuid"
			dev_done="$dev"
		else
			if echo "$all_uuids" | grep -q "$uuid" ; then
				# it's a already used uuid so fallback to dev
				uuid=$dev
			else 
				# this is a new one so add it into the list
				all_uuids="$all_uuids $uuid"
			fi
			dev_done="$dev_done $dev"
		fi

		point=$(echo $i |cut -d ":" -f2)
		fstype=$(/usr/sbin/scanpartitions $dev |awk '{print $3}')
		options="defaults"

		output $uuid $point $fstype $options $dump $pass
	done
	out "\n"
}

#--------------------------------------------------------------

devs_in_media()
{
	#now we scan all existent partitions
	iocs=""
	nls=""
	if [ "$(locale charmap)" = "UTF-8" ]; then
		iocs=",iocharset=utf8"
		nls=",nls=utf8"
	fi

	while read dev point fstype relax; do
		if echo "$dev_done" |grep -q "$dev" ; then
			# skip this one ...
			:
		else
			if ! is_device_removable $dev ; then

				create_media_entry $point

				options="noauto,users,exec"

				case "$fstype" in
					ntfs)
						uuid="/dev/disk/by-uuid/$(/lib/udev/vol_id -u $dev)"
						options="${options},ro,umask=000${nls}"
						[ -n "$user" ]  && options="$options,uid=$user"
						[ -n "$group" ] && options="$options,gid=$group"
						;;
					msdos)
						uuid="/dev/disk/by-uuid/$(/lib/udev/vol_id -u $dev)"
						options="${options},umask=000,quiet${iocs}"
						[ -n "$user" ]  && options="$options,uid=$user"
						[ -n "$group" ] && options="$options,gid=$group"
						;;
					vfat)
						uuid="/dev/disk/by-uuid/$(/lib/udev/vol_id -u $dev)"
						options="${options},umask=000,shortname=mixed,quiet${iocs}"
						[ -n "$user" ]  && options="$options,uid=$user"
						[ -n "$group" ] && options="$options,gid=$group"
						;;
					swap)
						uuid="$(/lib/udev/vol_id -u $dev)"
						[ -z "$uuid" ] && uuid=$dev || uuid="UUID=$uuid"
						options="sw"
						;;
					*)
						uuid="$(/lib/udev/vol_id -u $dev)"
						[ -z "$uuid" ] && uuid=$dev || uuid="UUID=$uuid"
						;;
				esac

				if echo "$all_uuids" | grep -q "$uuid" ; then
					# it's a already used uuid so fallback to dev
					uuid=$dev
				else 
					# this is a new one so add it into the list
					all_uuids="$all_uuids $uuid"
				fi
				dev_done="$dev_done $dev"
				out "%s\n" "# added by sidux"
				output $uuid $point $fstype $options $dump $pass
				out "\n"
			fi
		fi
	done <<EOT
$(/usr/sbin/scanpartitions)
EOT
}

#--------------------------------------------------------------

optical_devs()
{
	info="/proc/sys/dev/cdrom/info"

	# at the end we go through the CD/DVD drives
	nr_cdroms=$(cat $info |grep -e "drive name" |sed 's/^.*://'| wc -w)
	i=$(cat $info |grep -e "drive name" |sed 's/^.*://'| wc -w)
	

	while [ "$i" -gt "0" ]; do
		col=$i
		name=$(cat $info |grep -e "drive name" |sed 's/^.*://'|\
				awk '{print $n}' n=$col  )
		CDR=$(cat $info |grep 'Can write CD-R:' | sed 's/^.*://' | \
				awk '{print $n}' n=$col  )
		CDRW=$(cat $info |grep 'Can write CD-RW:' | sed 's/^.*://' | \
				awk '{print $n}' n=$col  )
		DVD=$(cat $info |grep 'Can write DVD:' | sed 's/^.*://' | \
				awk '{print $n}' n=$col  )
		DVD_R=$(cat $info |grep 'Can write DVD-R:' | sed 's/^.*://' | \
				awk '{print $n}' n=$col  )
		DVD_RAM=$(cat $info |grep 'Can write DVD-RAM:' | sed 's/^.*://' | \
				awk '{print $n}' n=$col  )
	
#		cdrom="/dev/cdrom$(($nr_cdroms - $i))"
		point="/media/cdrom$(($nr_cdroms - $i))"

		create_media_entry $point

		out "%s\n" "# added by sidux"
		print_outcdrom "/dev/$name" $point $CDR $CDRW $DVD $DVD_R $DVD_RAM
		i=$(($i - 1))
		out "\n"
	done
}

#--------------------------------------------------------------

floppy_devs()
{
	fstype="auto"
	options="rw,user,noauto"
	dump=0
	pass=0

	for device in $(echo /sys/block/fd*); do
		if [ -d "${device}" ] ; then

			devnr="$(echo $device | sed s/.*fd//g)"
			point="/media/floppy${devnr}"
			dev="/dev/fd${devnr}"

			create_media_entry $point

			out "%s\n" "# added by sidux"
			output $dev $point $fstype $options $dump $pass
			out "\n"
		fi
	done
}

#--------------------------------------------------------------
# preparation
#--------------------------------------------------------------

TEMP=`getopt -o hmw --long help,make-mountpoints,write-fstab \
     -n  "$(basename $0)" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-h|--help)
			usage;
			exit 0
			;;
		-w|--write-fstab) 
			write_fstab="yes";
			shift ;;
		-m|--make-mountpoints)
			create_mount_points="yes" ;
			shift ;;

		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done

test -e ${FSTAB} && rm -f ${FSTAB}

#--------------------------------------------------------------
# do the main job
#--------------------------------------------------------------

start

devs_not_in_media

devs_in_media

optical_devs

floppy_devs

exit 0
