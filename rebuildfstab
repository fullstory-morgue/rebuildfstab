#!/bin/dash
#
# (Copyright  (C) 2007 sidux Foundation,Inc.
#             (C) 2007 Joaquim Boura <x-un-i@sidux.com>
#             (C) 2007 Kel Modderman <kel@otaku42.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# On Debian GNU/Linux systems, the text of the GPL license can be
# found in /usr/share/common-licenses/GPL.
#
#--------------------------------------------------------------

[ "$(id -u)" -ne 0 ] && exec su-me "$0" "$@"

#--------------------------------------------------------------
# the defaults

all_dev_names=""
dev_done=""
create_mount_points="no"
write_fstab="no"
fstab="/etc/fstab"
scan_opts=""
no_swap=""
quiet=""

#--------------------------------------------------------------

usage()
{
	echo ""
	echo "$(basename $0) can (re)create the /etc/fstab file and can create"
	echo "missing mountpoints in /media"
	echo ""
	echo "By default $(basename $0) prints fstab to stdout, and does not"
	echo "(re)create mountpoints"
	echo ""
	echo "-h|--help                 print this help"
	echo "-w|--write-fstab          (re)create the fstab file"
	echo "-m|--make-mountpoints     (re)create mountpoints in /media"
	echo "-n|--no-swap              don't write fstab entry for swap partitions"
	echo "-U|--uuids                use UUID's for mount names when possible"
	echo "-L|--labels               use LABELS's for mount names when possible"
	echo "-f|--fstab <file>         target file to write output to"
	echo "-a|--auto                 set auto mount option where applicable"
	echo "-q|--quiet                surpress output when writing to file"
	echo "-d|--debug                debug sh code execution"
	echo ""
	echo "rebuildfstab is intended for initial creation of /etc/fstab in situations"
	echo "similar to that of a live linux demonstrtation cd where the fstab file"
	echo "must be generated from scratch. It is not intended for ongoing maintenance"
	echo "of the fstab file on standard hard disk installations."
	echo ""
	echo " Use it at your own risk, it comes without any warranty."
	echo ""
}

#--------------------------------------------------------------

warn_about_root_and_bootloader()
{
	echo ""
	echo "WARNING!    WARNING!    WARNING!    WARNING!    WARNING!   WARNING!"
	echo ""
	echo "You have written a new $fstab file and the root device is"
	echo "identified by the following name:"
	echo ""
	echo "$1"
	echo ""
	echo "Your bootloader expects your root device to be named differently,"
	echo "and if you were to reboot now without first adjusting your bootloader"
	echo "the system may fail to boot."
	echo
	echo "Please make sure that your bootloader appends the following to"
	echo "the list of kernel boot parameters:"
	echo ""
	echo "root=$dev_name"
	echo ""
	echo "If you use grub, make sure you adjust the \`kopts' line of"
	echo "/boot/grub/menu.lst so that it uses the new root= device name and"
	echo "execute update-grub before rebooting the system."
	echo ""
	echo "WARNING!    WARNING!    WARNING!    WARNING!    WARNING!   WARNING!"
	echo ""
}

#--------------------------------------------------------------

bad_arg_value()
{
	usage
	exit 1
}

#--------------------------------------------------------------

out()
{
	if [ "$write_fstab" = "yes" ]; then
		printf "${@}" >> ${fstab}
	else
		printf "$@"
	fi
}

#--------------------------------------------------------------

create_media_entry()
{
	if [ "$create_mount_points" = "yes" ] ; then
		[ -d "$1" ] || mkdir -p "$1" 2>/dev/null
	fi
}

#------------------------------------------------------------
#output $uuid $point $fstype $options $dump $pass

output()
{
	out "%s\t%s\t%s\t%s\t%s %s\n" $1 $2 $3 $4 $5 $6
}

#--------------------------------------------------------------

start()
{
	out "%s\n" "# /etc/fstab: static file system information" 
	out "%s\n" "#"
	out "%s\t%s\t%s\t%s\t%s\n\n" "# <file system>" "<mount point>" "<type>" "<options>" "<dump> <pass>"
}

#--------------------------------------------------------------
# print_outcdrom $name $point $CDR $CDRW $DVD $DVD_R $DVD_RAM

print_outcdrom()
{
	local fstype options

	fstype="udf,iso9660"
	options="user,noauto"
 	
	output $1 $2 $fstype $options 0 0
}

#--------------------------------------------------------------
# return 0 if the device is a removable one
# firewire and usb are removable ones...

is_device_removable()
{
	local curdev
	
	curdev=$(echo ${1#/dev/} | sed 's/[0-9]*$//')
	
	if test -L /sys/block/${curdev}/device; then
		echo $(readlink -f /sys/block/${curdev}/device) | grep -q -e usb -e fw
		return $?
	fi

	return 1
}

#--------------------------------------------------------------
# take care of  all_dev_names list
# side effect on duplicates dev_name var is changed

handle_device_list()
{
	local i
	for i in $all_dev_names; do 
		if [ "$i" = "$dev_name" ]; then 
			found_it=true 
			break
		else 
			found_it=false
		fi
	done
	if [ found_it = "true" ]; then
		# fallback to dev
		dev_name="#$dev_name"
	else
		# this is a new one so add it into the list
		all_dev_names="$all_dev_names $dev_name"
	fi
}

#--------------------------------------------------------------
# determine actual device node

resolve_device_node()
{
	local node

	test -n "$1" || return 0

	case "$1" in
		LABEL=*|UUID=*)
			node=$(findfs $1)
			;;
		/dev/disk/by-*)
			node=$(readlink -f $1)
			;;
		/dev/*)
			node="$1"
			;;
		*)
			# skip if not a UUID, LABEL or /dev/ node
			return 0
			;;
	esac

	test -b "$node" && echo "$node"
}

#--------------------------------------------------------------

comment_device()
{
	local comment="$1"
	
	case "$scan_opts" in
		*labels*)
			# no need to display label in comment too
			;;
		*)
			label=$(/lib/udev/vol_id -l $1 2>/dev/null)
			if [ "$label" ]; then
				comment="$1 LABEL=$label"
			else
				comment="$1 (no label)"
			fi
			;;
	esac

	echo "$comment"
}

#--------------------------------------------------------------

devs_not_in_media()
{
	# Mounted Partitions not in /media, formated as dev:pnt
	mntpnt=$(awk '$2 !~ /\/dev\/\.static\// { print $1":"$2 }' /proc/mounts)

	dump=0

	for i in ${mntpnt}; do
		unset dev pnt dev_name fstype options

		# default passno, overriden for /
		pass=2
		
		# resolve actual device node
		dev=$(resolve_device_node $(echo $i |cut -d ":" -f1))
		
		# skip if we failed to locate a device node
		test -n "$dev" || continue
		
		# mount point
		pnt=$(echo $i |cut -d ":" -f2)
		
		# clobber positional variables
		[ "$#" != 0 ] && shift $#
		
		# assign positional parameters: ($1, $2, $3) = ($dev_name, $mntpnt, $fstype)
		set -- $(scanpartitions $scan_opts $dev 2>/dev/null)
		
		# 3 positional parameters were not assigned above, via scanpartitions
		# we cannot handle this device, process next possible device
		[ "$#" != 3 ] && continue
		
		dev_name="$1"
		fstype="$3"
		options="defaults"
		
		case "$pnt" in
			'/')
				# passno is always 1 for /
				pass=1
				# could lead to problems for curious users
				if [ "$write_fstab" = "yes" ] && [ "$quiet" != "yes" ] && \
					! grep -q -s "root=$dev_name" /proc/cmdline; then
					warn_about_root_and_bootloader "$dev_name"
				fi
				options="defaults,errors=remount-ro"
				;;
			'/media/'*|'/fll'*)
				continue
				;;
		esac
					
		if test -z "$all_dev_names" ; then
			# the first one
			all_dev_names="$dev_name"
			dev_done="$dev"
		else
			# the others
			handle_device_list
			dev_done="$dev_done $dev"
		fi

		if [ "$fstype" = "swap" ] && [ "$no_swap" = "yes" ]; then
			continue
		fi

		out "# added by rebuildfstab: %s\n" "$(comment_device $dev)"
		output $dev_name $pnt $fstype $options $dump $pass
	done
	
	[ "$dev_done" ] && out "\n"
}

#--------------------------------------------------------------

devs_in_media()
{
	# now we scan all existing partitions, as detected by scanpartitions
	
	unset iocs nls 
	
	if [ "$(locale charmap)" = "UTF-8" ]; then
		iocs="iocharset=utf8"
		nls="nls=utf8"
	fi

	while read dev_name point fstype relax; do
		
		dump=0
		pass=2
		
		# resolve actual device node
		dev=$(resolve_device_node "$dev_name")
		
		# skip if we failed to locate a device node
		test -n "$dev" || continue 

		if echo "$dev_done" | grep -q "$dev" ; then
			# skip this one ...
			:
		else
			if ! is_device_removable $dev ; then

				create_media_entry $point

				if [ "$auto" = 1 ]; then
					options="auto,users,exec"
				else
					options="noauto,users,exec"
				fi

				case "$fstype" in
					ntfs)
						options="${options},ro,dmask=0022,fmask=0133,${nls}"
						pass=0
						;;
					msdos)
						options="${options},quiet,umask=000,${iocs}"
						pass=0
						;;
					vfat)
						options="${options},shortname=mixed,quiet,umask=000,${iocs}"
						pass=0
						;;
					swap)
						options="sw"
						;;
					*)
						;;
				esac

				handle_device_list
				dev_done="$dev_done $dev"

				if [ "$fstype" = "swap" ] && [ "$no_swap" = "yes" ]; then
					continue
				fi

				out "# added by rebuildfstab: %s\n" "$(comment_device $dev)"
				output $dev_name $point $fstype $options $dump $pass
				out "\n"
			fi
		fi
	done <<EOT
$(/usr/sbin/scanpartitions $scan_opts 2>/dev/null)
EOT
}

#--------------------------------------------------------------

optical_devs()
{
	for i in /dev/cdrom*; do
		test -b "$i" || continue

		dev="$i"
		point="/media/$(basename $dev)"

		create_media_entry $point

		out "%s\n" "# added by rebuildfstab"
		print_outcdrom $dev $point
		out "\n"
	done
}

#--------------------------------------------------------------

floppy_devs()
{
	fstype="auto"
	options="rw,user,noauto"
	dump=0
	pass=0

	for device in /sys/block/fd*; do
		if [ -d "${device}" ] ; then

			devnr="$(echo $device | sed s/.*fd//g)"
			point="/media/floppy${devnr}"
			dev="/dev/fd${devnr}"

			create_media_entry $point

			out "%s\n" "# added by rebuildfstab"
			output $dev $point $fstype $options $dump $pass
			out "\n"
		fi
	done
}

#--------------------------------------------------------------
# preparation
#--------------------------------------------------------------

TEMP=`getopt -o adf:hLmnqwU \
	--long auto,debug,fstab:,help,labels,make-mountpoints,no-swap,write-fstab,quiet,,uuids \
	-n  "$(basename $0)" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-a|--auto)
			auto=1
			shift
			;;
		-d|--debug)
			set -x
			shift
			;;
		-f|--fstab)
			fstab="$2"
			shift 2
			;;
		-h|--help)
			usage
			exit 0
			;;
		-w|--write-fstab) 
			write_fstab="yes"
			shift
			;;
		-L|--labels)
			if [ "$scan_opts" ]; then
				scan_opts="${scan_opts} --labels"
			else
				scan_opts="--labels"
			fi
			shift
			;;
		-m|--make-mountpoints)
			create_mount_points="yes"
			shift
			;;
		-n|--no-swap)
			no_swap="yes"
			shift
			;;
		-q|--quiet)
			quiet="yes"
			shift
			;;
		-U|--uuids)
			if [ "$scan_opts" ]; then
				scan_opts="${scan_opts} --uuids"
			else
				scan_opts="--uuids"
			fi
			shift
			;;
		--) 
			shift
			break ;;
		*)
			echo "Internal error!"
			exit 1
			;;
	esac
done

if [ "$write_fstab" = "yes" ]; then
	test -e ${fstab} && mv -f ${fstab} ${fstab}.old
fi

#--------------------------------------------------------------
# do the main job
#--------------------------------------------------------------

start

devs_not_in_media

devs_in_media

optical_devs

floppy_devs

exit 0
