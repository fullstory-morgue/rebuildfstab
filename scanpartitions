#!/usr/bin/perl -w
#
# Copyright (C) 2007 Kel Modderman <kel@otaku42.de>
#		     Michiel de Boer <locsmif@kanotix.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this package; if not, write to the Free Software 
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, 
# MA 02110-1301, USA.
#
# On Debian GNU/Linux systems, the text of the GPL license can be
# found in /usr/share/common-licenses/GPL.

use strict;
use Getopt::Long qw(:config bundling no_auto_abbrev);

die("Must be root...\n") unless $> == 0;

my (%partitions, %label, %label_seen, %uuid, %uuid_seen);
my ($debug, $use_uuids, $use_labels) = (0, 0, 0);

sub dbg {
	return unless $debug;
	
	my $data = shift;
	if (ref $data) {
		print STDERR Dumper($data);
	}
	else {
		print STDERR "$data\n";
	}
}

sub vol_id {
	return unless -x '/lib/udev/vol_id';

	my $vol = shift;
	if ($vol !~ m|^/dev/|) {
		$vol = "/dev/" . $vol;
	}
	return unless -b $vol;

	open(my $fh, "-|", "/lib/udev/vol_id $vol 2>/dev/null");
	while (<$fh>) {
		chomp;
		dbg($_);
		m/^ID_FS_([^=]+)=(.+)$/ and $partitions{$vol}{lc($1)} = $2;
	}
	close($fh);
}

sub parse_partitions {
	return unless -f '/proc/partitions';

	open(my $fh, '<', '/proc/partitions');
	while (<$fh>) {
		chomp;
		dbg($_);
		if(/\s+(\d+)\s+(\d+)\s+(\d+)\s+(.+)/) {
			next if $4 =~ /^(ram|cloop|loop)[0-9]*/;
			vol_id($4);
		}
	}
	close($fh);
}

GetOptions(
	"d|debug" => sub { $debug++ },
	"u|uuids" => sub { $use_uuids++ },
	"l|labels" => sub { $use_labels++ },
);

if ($debug) {
	require Data::Dumper;
	import Data::Dumper;
}

if (@ARGV) {
	vol_id($_) foreach (sort @ARGV);
}
else {
	parse_partitions();
}

dbg(\%partitions);

foreach my $p (sort keys %partitions) {
	my ($usage, $type, $label, $uuid) = @{ $partitions{$p} }{'usage', 'type', 'label_enc', 'uuid_enc'};
	my ($mntdev, $mntpnt) = ();
	
	dbg("\$p = '$p'");
	dbg($partitions{$p});

	next unless $usage =~ /(filesystem|other)/;
	next if $type =~ /(unknown|iso9660|udf|squashfs)/;

	if ($use_uuids and $uuid) {
		if ($uuid_seen{$uuid}) {
			print STDERR "Duplicate UUID ($p): $uuid\n";
		}
		else {
			# add to uuid hash
			$uuid_seen{$uuid} = 1;
			# form UUID string for fstab
			$mntdev = ($type =~ /^(vfat|msdos|ntfs|hfsplus)$/) ? "/dev/disk/by-uuid/$uuid" : "UUID=$uuid";
		}
	}

	if ($use_labels and $label) {
		if ($label_seen{$label}) {
			print STDERR "Duplicate LABEL ($p): $label\n";
		}
		else {
			# add to label hash
			$label_seen{$label} = 1;
			# form LABEL fstab string
			$mntdev = ($type =~ /^(vfat|msdos|ntfs|hfsplus)$/) ? "/dev/disk/by-label/$label" : "LABEL=$label";
			# mountpoint name is label
			$mntpnt = "/media/$label";
		}
	}

	# device name as default/fallback
	$mntdev ||= $p;

	# mountpoint name, none for swap, /media/XXX for everything else
	$mntpnt = 'none' if $type eq 'swap';
	($mntpnt ||= '/media/' . $p) =~ s|/dev/||;

	dbg("\$mntdev = '$mntdev'; \$mntpnt = '$mntpnt'");

	printf("%s %s %s\n", $mntdev, $mntpnt, $type);
}
